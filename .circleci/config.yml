version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        # parameters:
        #   workflow_id:
        #     type: string
        steps:
          # - run:
          #     when: on_fail
          #     name: install aws aws-cli
          #     command: |
          #       yum -y install aws-cli
          #       # apk update
          #       # apk add --no-cache aws-cli
          - run:
              name: Destroy environments
              when: on_fail
              command: |
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      # parameters:
      #   # Add parameter here     
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
              SUCCESS=$(curl --insecure  https://kvdb.io/ThzfJwmvaXFKjhBWTGNhmP/migration_${CIRCLE_WORKFLOW_ID:0:7})
              echo "https://kvdb.io/ThzfJwmvaXFKjhBWTGNhmP/migration_${CIRCLE_WORKFLOW_ID:0:7}"
              # Logic for reverting the database state
              echo "${SUCCESS}"
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi  

jobs:

  # Build Jobs

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  # # Test Jobs

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-Build]
      - run:
          name: Run Back-end tests
          command: |
            cd backend
            npm install
            npm run test

  # # # Jobs for vulnerability Scanning

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  # Deploy infrastructure jobs
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
            # apk update
            # apk install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            # aws cloudformation describe-stacks \
            # --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            # --query 'Stacks[0].Outputs[*].{Key:OutputKey, Value:OutputValue}' \
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            echo $BACKEND_IP >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      # - destroy-environment:
      - destroy-environment
          # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # Configure of infrastructure
  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["9c:bc:0f:1e:9d:7e:29:8f:c2:53:a5:8d:ca:ff:04:02"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install tar and gzip
          command: |
            apk add --no-cache tar gzip
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment      

  # Deploy Phase
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            echo "insecure" >> ~/.curlrc
            # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
            curl https://kvdb.io/ThzfJwmvaXFKjhBWTGNhmP/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure   

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            apk add nodejs
            apk add npm
            apk add curl
            apk add --update tar gzip
            pip install awscli --upgrade
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["9c:bc:0f:1e:9d:7e:29:8f:c2:53:a5:8d:ca:ff:04:02"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install tar and gzip
          command: |
            apk add --no-cache tar gzip
      - run:
          name: Install dependencies
          command: |
            apk add nodejs
            apk add npm
            apk add curl
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

 # Smoke test for front and backend
  smoke-test:
    docker:
      - image: node:13.8-buster #circleci/node:13.8.0 # python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # apk add nodejs
            # apk add npm
            # apk add curl
            apt update
            apt-get install -y curl
            apt-get install -y awscli
            # pip3 install awscli
            # pip install awscli --upgrade
      # - run:
      #     name: Get backend url
      #     command: |
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              exit 0
              # return 0
            else
              exit 1
              # return 1
            fi

      - run:
          name: Backend smoke test.
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
              echo ${BACKEND_IP}
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                exit 0
              else
                exit 1
              fi

      - destroy-environment
      - revert-migrations
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

# Promotion Phase
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
              export OldWorkflowID=$(aws cloudformation list-exports \
                --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"  
              echo ${OldWorkflowID} >> ~/OldWorkflowID.txt
              cat ~/OldWorkflowID.txt
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              echo OldWorkflowID: "${OldWorkflowID}"
              echo Current WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  

# Clean up phase
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove old stack and files
          command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              export OldWorkflowID="${OldWorkflowID}"
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"

              if [[ ${CIRCLE_WORKFLOW_ID:0:7} != ${OldWorkflowID} ]]
              then
                echo "---------Delete confirmed----------------"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              else
                echo "-----------cannot clean up----------------"
              fi
      - destroy-environment
      - revert-migrations


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]